- Behance.net => front end

--Addin VSCode
Bracket pair: pair cặp dấu () hoặc {}
Live server: không cần refresh page html để apply thay đổi mà server tự update
Prettier code: phân màu các mã code cho dễn nhìn
VScode-icons: đánh icon cho các file để dễ nhìn.

--- Buổi 3
CSS selector
1. simple selector:
    - id
    - class
    - element
    - group element
2. Combinator selector
    - Kết hợp giữa element và id hoặc class: ví du: p.classname
    - chọn các element trong 1 element cha: ví dụ: div page
    - Chọn các element là con cấp 1 của element cha: ví du: div > p (get các thẻ p là con cấp 1 của div)
3. Pseudo class selector
4. Pseudo element selector
5. Attribute selector
    - Ví dụ [name="hello"], 
    - ví dụ: .classname1.ClassName2: get các thẻ html mà có 2 classname
    - Ví du: [class*="hello"]: Get các thẻ html có thuộc tính class bắt đầu bằng chữ hello

Độ ưu tiên CSS:
- CSS selector (ID > attribute/class > element)
- Theo thứ tự;
- Theo cách sử dụng; Inline > internal > extenal

--- Buổi 4
animation:
 - transform - trasision
 - @keyframes ten
    from{

    }
    to{

    }
    0%{

    }
    50%{

    }
    100%{

    }

-- Buổi 5
Có 5 kỹ thuật chia layout
1. Table: Kỹ thuật cũ.
2. Column: Thường dùng cho các trạng có nhiều chữ.
3. Float*: Cột không cao đều nhau
4. Grid: Không hỗ trợ trình duyệt IE
5. Flex (Flexbox)*: Hỗ trợ IE, chỉ có 1 số thuộc tính không hỗ trợ IE.

comment: Ctrl + K + C

--------------------------
Buổi 8:
- JS là ngôn ngữ lập trình phổ biến nhất thế giới
- JS dễ học do cần tuân thủ nhiều quy tắc như các ngôn ngữ lập trình khác
- JS dùng để lập trình cho các hoạt động của web. ngoài ra có thể được dùng làm backend


- JS có thể thay đổi:
    1. Nội dung của 1 thẻ html: ví dụ: document.getElementById("demo").innerHTML = ...
    2. giá trị thuộc tính của 1 thẻ html. Ví dụ: document.getElementById("demo").src = ...
    3. Thay đổi giá trị thuộc tính của css. Ví dụ: document.getElementById("demo").style.font-size = ...

- JS có 2 cách để triển khai trong 1 tài liệu html
    1. Viết JS trong 1 cặp thẻ <script></script>
    2. Viết trong 1 file .js và import vào tài liệu html thông qua thẻ <script src="xxx.js"></script>

- syntax
    1. Khai báo biến
        - var:
        - left
        - const
    2. Khai báo hàm
    3. Kiểu dữ liệu
    4. DOM trong JS
        - DOM event: có 3 cách
            1. Gọi trực tiếp tiếp thuộc tính trong thẻ html: <button onClick"" id="btn"></button>
            2. Thêm thuộc tinh onClick trong html bằng jS: document.getElementById("btn").onClick = function {};
            3. Gọi bằng hàm addEvenListener: document.getElementById("btn").addEvenListener("click",function{});
        - DOM relationship (quan hệ giữa các phần tử html):
            + children: tập hợp html collection mà là con trực tiếp của thẻ cha. 
                Truy cập phần tử nào thì dùng như mảng.
            + firstElementChild: Trả về html element mà là con trực tiếp đầu tiên
            + lastElementChild: Trả về html element mà con trực tiếp cuối cùng 
            + nextElementSibling: Trả về html tiếp theo so với html hiện tại
            + parentElement: Trả về html cha trực tiếp của html hiện tại
        - DOM node
            + document.createElement("html element"): Tạo 1 html element
            + li.appendChild(a): cho thẻ a vào làm con của thẻ li ở vị trí cuối: 
            + li.prepend(a): cho thẻ a vào làm con của thẻ li ở vị trí đầu
            + ul.replaceChild(element cũ, element mới): Thay thết element cũ bằng element mới mà là con của ul
            + ul.removeChild(li): xóa phần tử li trong thằng ul
    5. Vòng lặp, hàm trong JS hỗ trợ
    6. JSON: 
        javascript object notation. Cấu trúc chuỗi text theo dạng đối tượng trong JS. Trao đổi dữ liệu qua lại giữa các nền tảng
        - Convert từ Object => JSON: JSON.stringify(object)
        - convert từ JSON -> Object: JSON.parse(json)
    7. Ajax
    8. Array:
        - mảng là 1 Object
        - Hàm cơ bản;
            sort(): sắp xếp
            push(6): Thêm phần tử vào cuối mảng
            pop(): Xóa phần tử ở cuối mảng
            shift(): xóa phần tử đầu mảng
            splice(vị trí phần tử đầu tiên,n): xóa n phần tử bắt đầu ở vị trí đầu tiên 
            concat([mảng]): nối mảng
            join("-"): print phần tử trong mảng phân tách bới -
    9. String
        - concat(str): công chuỗi
        - lengh: số lượng kí tự của String
        - chartAt(index): lấy kí tự ở vị trí index trong chuỗi
        - indexOf(strFind): Tìm kiếm chuối strFind từ đầu xuống cuối
        - lastIndexOf(str): Tìm kiếm chuỗi str từ cuối lên đầu
        - subStr(startIndex, n): cắt n kí tự từ vị trí startIndex
        - subString(startIndex, endIndex): cắt chuỗi từ vị trí start đến vị trí end 
        - split(str): chia chuỗi thành array theo str.
        - replace(str1, str2): thay thế chuỗi str1 thành chuỗi str2. Chuỗi gốc không bị thay đổi.
    10. Object
        - Khởi tạo bằng từ khóa new
        - khởi tạo và gán giá trị:
            var personA = {
                name: "Phuong",
                age: 20,
                eat: function (){
                    return this.name + " eat"
                }
            }
        - Thêm thuộc tính cho đối tượng:
            personA.address = "Ha Noi"
        - Thêm hành vi cho đối tượng:
            person.sleep = function(){
                return this.name + " sleep"
            }
        - ES 5 hỗ trợ hàm set get:
            set setName(name){
                this.name = name;
            }

            get getName(){
                return this.name;
            }

            person.setName = "PhuongNH";
            var name = person.getName;
        - Object.keys(object): => get mảng key của JSON
    
    11. localStorage, sessionStorage: Lưu trữ data dạng key-value. Chỉ lưu data dạng string
        localStorage: Data lưu trữ có thể sử dụng chung ở nhiều tab.
        sessionStorage: data lưu trưc chỉ có thể sử dụng trong tab hiện tại
    12. Timming Events: gọi xử lý 1 funtion sau 1 khoảng thời gian
        - windown.setTimeout(function(){}, 5000): xử lý function sau khoảng 5000 ms
        - windown.setInterval(function(){}, 1000): Xử lý function sau khoảng 1000 ms, function sẽ xử lý lặp đi lặp lại sau 1000ms

        - windown.clearTimeout(setTimeout(function(){}, 1000)): Dừng việc xử lý function khi chưa hết 1000ms
        - windown.clearInterval(setInterval(function(){}, 5000)): Dừng việc xử lý lặp đi lặp lại function khi chưa hết 5000ms
    13. location: 
        - location.reload(): Reload lại trang html
        - location.href = url: Chuyển hướng trang html
        - location.pathName: lấy đường dẫn tương đối của url
        - location.port: lấy port của url
    14: Navigator: Truy xuất thông tin của trình duyệt
        - navigator.appName
        - navigator.appVersion
        - navigator.cookieEnabled
        - navigator.userAgent
    15. windown
        - windown.innerHeight: lấy chiều cao hiện tịa của trình duyệt
        - windown.innerWidth: Lấy chiều rộng hiện tại của trình duyệt
        - windown.open(): new tab
        - windown.close(): close tab

        // screen object
        - screen.width: chiều rộng fix cứng của thiết bị
        - screen.height: Chiều cao fix cứng của thiết bị
        - screen.avaiHeight: chiều cao sau khi trừ đi các thành phần như toolbar, ...
    16. Cookie: 1 chuỗi string chứa các cặp key-value có thời gian sống nhất định, lưu trên client
        - document.cookie: lấy chuỗi cookie, trả về dạng string;
        - "expires": thời gian sống của cookie
        - path: Đướng dẫn của cookie
        - delete cookie: set time của cookie về quá khứ
    17. Geo Location: Lấy vị trí hiện tại.
        - Trình duyệt phải hỗ trợ geo location
        - navigator.geolocation.getCurrentPosition(funnction success(), function error());
        => Nếu cho phép trình duyệt truy cập location => xử lý function success(position), ngược lại xử lý function error(err)
        - position.coords: lấy ra đối tượng đối tượng chứa thông tin vị trí hiện tại
    18. async await

-------------------------------------

 - set sự kiện trong js: addEvenListener
 - Mảng a = [...b]: a copy các phần tử của b. b không bị ảnh hưởng
        a = b => mảng a hoặc b thay đổi => mảng còn lại cũng bị thay đổi
        thêm dòng code debugger để đặt debug
        F5: Skip debug
        F10; Next line
        F11; into function

---------------------------------------
Buoi 11
 - XMLHttpRequest
 - Ajax
 - Jquery: Thư viện JS để đỡ phải code JS nhiều
 - Bootstrap: Thư viện hỗ trợ css nhanh hơn

------------------------------------
Buổi 12:
